{"version":3,"sources":["Redux/store/Data/Data.actions.ts","Redux/store/Data/Data.reduser.ts","Redux/store/Photo/Photo.actions.ts","Redux/store/Photo/Photo.reduser.ts","Redux/store/Catalog/Catalog.actions.ts","Redux/store/Catalog/Catalog.reduser.ts","Redux/index.ts","services/common.ts","Components/Calendar/Calendar.tsx","Components/Tape/Tape.tsx","Pages/MainPage/MenuBlock/MenuBlock.tsx","Components/CartPhoto/CartPhoto.tsx","Pages/MainPage/PhotosBlock/PhotosBlock.tsx","Pages/MainPage/MainPage.tsx","services/photo.ts","Redux/store/Photo/Photo.sagas.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","setData","data","type","payload","initialState","Date","valueTodayDate","getPhotoByDay","currentDate","setCurrentPhoto","photo","setCatalog","catalog","getFailureAction","error","currentPhoto","catalogValue","combineReducers","state","action","handlerCommonChange","dispatch","newDate","toString","slice","localStorage","setItem","JSON","stringify","connect","date","parse","getItem","useEffect","Array","isArray","Box","component","className","utils","DateFnsUtils","Grid","container","justify","disableToolbar","variant","format","margin","id","label","value","onChange","KeyboardButtonProps","maxDate","getCatalogByDay","FormControlLabel","control","Checkbox","checked","name","color","MenuBlock","useStyles","makeStyles","theme","createStyles","root","width","maxWidth","height","textAlign","media","paddingTop","position","CardPhoto","classes","disableForward","back","forward","handlerArrow","Card","CardHeader","title","subheader","url","CardMedia","image","onClick","CardContent","Typography","explanation","List","map","item","index","key","MainPage","axios","require","apiKey","ServicePhoto","getPhoto","a","get","response","console","log","getCatalog","getPhotoByDaySaga","getCatalogSaga","photoSaga","getDate","objectDate","year","getFullYear","mouth","getMonth","day","actions","put","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","ScopedCssBaseline","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8249ce95.chunk.js","sourcesContent":["import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_DATA: \"[Data] Set data\",\r\n  SET_TODAY_DATA: \"[Data] Set today data\",\r\n}\r\n\r\nexport const setData = (data: Date): Action<Date> => ({\r\n  type: ActionTypes.SET_DATA,\r\n  payload: data,\r\n})\r\n\r\nexport const setTodayData = (value: boolean): Action<boolean> => ({\r\n  type: ActionTypes.SET_TODAY_DATA,\r\n  payload: value,\r\n})\r\n","import { ActionTypes } from \"./Data.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  data: Date;\r\n  valueTodayDate: boolean;\r\n}\r\n\r\nconst initialState: State = {\r\n  data: new Date(),\r\n  valueTodayDate: true,\r\n}\r\n\r\nexport const dataReducer = (\r\n  state: State = initialState,\r\n  action: Action<Date | boolean>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_DATA:\r\n    return {\r\n      ...state,\r\n      data: action.payload,\r\n    }\r\n    case ActionTypes.SET_TODAY_DATA:\r\n      return {\r\n        ...state,\r\n        valueTodayDate: action.payload,\r\n      }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\nimport { PhotoInterface } from \"../../InterfacesEntity/Photo.interface\"\r\n\r\nexport const ActionTypes = {\r\n  GET_PHOTO_BY_DAY: \"[Photo] Get photo by day\",\r\n  SET_CURRENT_PHOTO: \"[Photo] Set current photo\",\r\n  GET_CATALOG_BY_DAY: \"[Photo] Get catalog by day\",\r\n  SET_CATALOG: \"[Photo] Set catalog\",\r\n\r\n  GET_FAILURE: \"[getFailure] Get failure\",\r\n}\r\n\r\nexport const getPhotoByDay = (currentDate: Date): Action<Date> => ({\r\n  type: ActionTypes.GET_PHOTO_BY_DAY,\r\n  payload: currentDate,\r\n})\r\n\r\nexport const setCurrentPhoto = (\r\n  photo: PhotoInterface\r\n): Action<PhotoInterface> => ({\r\n  type: ActionTypes.SET_CURRENT_PHOTO,\r\n  payload: photo,\r\n})\r\n\r\nexport const getCatalogByDay = (currentDate: Date): Action<Date> => ({\r\n  type: ActionTypes.GET_CATALOG_BY_DAY,\r\n  payload: currentDate,\r\n})\r\n\r\nexport const setCatalog = (\r\n  catalog: [PhotoInterface]\r\n): Action<[PhotoInterface]> => ({\r\n  type: ActionTypes.SET_CATALOG,\r\n  payload: catalog,\r\n})\r\n\r\nexport const getFailureAction = (error?: any): Action<any> => ({\r\n  type: ActionTypes.GET_FAILURE,\r\n  payload: error,\r\n})\r\n","import { PhotoInterface } from \"../../InterfacesEntity/Photo.interface\"\r\nimport { ActionTypes } from \"./Photo.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  currentPhoto: PhotoInterface;\r\n  catalog: [PhotoInterface];\r\n}\r\n\r\nconst initialState: State = {\r\n  currentPhoto: {} as PhotoInterface,\r\n  catalog: [{} as PhotoInterface],\r\n}\r\n\r\nexport const photoReducer = (\r\n  state: State = initialState,\r\n  action: Action<any>\r\n) => {\r\n  switch (action.type) {\r\n  case ActionTypes.SET_CURRENT_PHOTO:\r\n    return {\r\n      ...state,\r\n      currentPhoto: action.payload\r\n    }\r\n  case ActionTypes.SET_CATALOG:\r\n    return {\r\n      ...state,\r\n      catalog: action.payload\r\n    }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport const ActionTypes = {\r\n  SET_CATALOG_VALUE: \"[toggle] set toggle value\",\r\n}\r\n\r\nexport const setCatalogValue = (): Action<{}> => ({\r\n  type: ActionTypes.SET_CATALOG_VALUE,\r\n})\r\n","import { ActionTypes } from \"./Catalog.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n  catalogValue: boolean;\r\n}\r\n\r\nconst initialState: State = {\r\n  catalogValue: false,\r\n}\r\n\r\nexport const catalogReducer = (\r\n  state: State = initialState,\r\n  action: Action<boolean>\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_CATALOG_VALUE:\r\n      return {\r\n        ...state,\r\n        catalogValue: !state.catalogValue,\r\n      }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { dataReducer } from \"./store/Data/Data.reduser\"\r\nimport { photoReducer } from \"./store/Photo/Photo.reduser\"\r\nimport { catalogReducer } from \"./store/Catalog/Catalog.reduser\"\r\n\r\nexport default combineReducers({\r\n  data: dataReducer,\r\n  currentPhoto: photoReducer,\r\n  catalog: catalogReducer,\r\n})\r\n","import { setData } from \"../Redux/store/Data/Data.actions\"\r\n\r\nconst handlerCommonChange = (dispatch: any, newDate: Date) => {\r\n  dispatch(setData(newDate))\r\n  if (newDate.toString().slice(4, 11) !== new Date().toString().slice(4, 11)) {\r\n    localStorage.setItem(\"date\", JSON.stringify(newDate.toString()))\r\n    localStorage.setItem(\"valueTodayDate\", \"\")\r\n  } else {\r\n    localStorage.setItem(\"valueTodayDate\", \"true\")\r\n  }\r\n}\r\n\r\nexport default handlerCommonChange\r\n","import React, { useEffect } from \"react\"\r\nimport DateFnsUtils from \"@date-io/date-fns\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\"\r\nimport { Box } from \"@material-ui/core\"\r\nimport { connect } from \"react-redux\"\r\nimport { setData } from \"../../Redux/store/Data/Data.actions\"\r\nimport { getPhotoByDay } from \"../../Redux/store/Photo/Photo.actions\"\r\nimport handlerCommonChange from \"../../services/common\"\r\n\r\ntype CalendarProps = {\r\n  currentDate: Date,\r\n  dispatch: any,\r\n}\r\n\r\nconst Calendar: React.FunctionComponent<CalendarProps> = ({\r\n  currentDate,\r\n  dispatch,\r\n}) => {\r\n  const date = Date.parse(localStorage.getItem(\"date\") || \"[]\")\r\n\r\n  useEffect(() => {\r\n    if (!Array.isArray(date) && !localStorage.getItem(\"valueTodayDate\")) {\r\n      dispatch(setData(new Date(date)))\r\n      dispatch(getPhotoByDay(new Date(date)))\r\n    }\r\n  }, [date, dispatch])\r\n\r\n  useEffect(() => {\r\n    if (!Array.isArray(date) && localStorage.getItem(\"valueTodayDate\"))\r\n      dispatch(getPhotoByDay(currentDate))\r\n  }, [currentDate, date, dispatch])\r\n\r\n  const handleDateChange = (newDate: Date | null) => {\r\n    if (\r\n      newDate &&\r\n      newDate.toString().slice(4, 11) !== currentDate.toString().slice(4, 11)\r\n    )\r\n      handlerCommonChange(dispatch, newDate)\r\n  }\r\n  return (\r\n    <Box component={\"div\"} className={\"calendar\"}>\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Grid container justify=\"space-around\">\r\n          <KeyboardDatePicker\r\n            disableToolbar\r\n            variant=\"inline\"\r\n            format=\"MM/dd/yyyy\"\r\n            margin=\"normal\"\r\n            id=\"date-picker-inline\"\r\n            label=\"Date picker inline\"\r\n            value={currentDate}\r\n            onChange={handleDateChange}\r\n            KeyboardButtonProps={{\r\n              \"aria-label\": \"change date\",\r\n            }}\r\n            maxDate={new Date()}\r\n          />\r\n        </Grid>\r\n      </MuiPickersUtilsProvider>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  currentDate: state.data.data,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Calendar)\r\n","import React, { useEffect } from \"react\"\r\nimport { Box, FormControlLabel, Checkbox } from \"@material-ui/core\"\r\nimport { getCatalogByDay } from \"../../Redux/store/Photo/Photo.actions\"\r\nimport { connect } from \"react-redux\"\r\nimport { setCatalogValue } from \"../../Redux/store/Catalog/Catalog.actions\"\r\n\r\ntype TapeProps = {\r\n  currentDate: Date,\r\n  catalogValue: boolean,\r\n  dispatch: any,\r\n}\r\n\r\nconst Tape: React.FunctionComponent<TapeProps> = ({\r\n  currentDate,\r\n  catalogValue,\r\n  dispatch,\r\n}) => {\r\n  useEffect(() => {\r\n    if (catalogValue) dispatch(getCatalogByDay(currentDate))\r\n  }, [catalogValue, currentDate, dispatch])\r\n\r\n  const handleChange = () => {\r\n    dispatch(setCatalogValue())\r\n  }\r\n  return (\r\n    <Box component={\"div\"} className={\"catalog\"}>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={catalogValue}\r\n            onChange={handleChange}\r\n            name=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Tape\"\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  currentDate: state.data.data,\r\n  catalogValue: state.catalog.catalogValue,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Tape)\r\n","import React from \"react\"\r\nimport { Box } from \"@material-ui/core\"\r\nimport Calendar from \"../../../Components/Calendar/Calendar\"\r\nimport Tape from \"../../../Components/Tape/Tape\"\r\n\r\nconst MenuBlock: React.FunctionComponent = () => {\r\n  return (\r\n    <Box component={\"div\"} className={\"menu-block\"}>\r\n      <Calendar />\r\n      <Tape />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MenuBlock\r\n","import React from \"react\"\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  CardMedia,\r\n} from \"@material-ui/core\"\r\nimport { PhotoInterface } from \"../../Redux/InterfacesEntity/Photo.interface\"\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\"\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\"\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\"\r\nimport handlerCommonChange from \"../../services/common\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      maxWidth: \"1400px\",\r\n      margin: \"auto\",\r\n      height: \"100%\",\r\n      textAlign: \"center\",\r\n    },\r\n    media: {\r\n      paddingTop: \"56.25%\", // 16:9\r\n      position: \"relative\",\r\n    },\r\n  })\r\n)\r\n\r\ntype CardPhotoProps = {\r\n  currentDate: Date,\r\n  currentPhoto: PhotoInterface,\r\n  catalogValue: boolean,\r\n  dispatch?: any,\r\n}\r\n\r\nconst CardPhoto: React.FunctionComponent<CardPhotoProps> = ({\r\n  currentDate,\r\n  currentPhoto,\r\n  catalogValue,\r\n  dispatch,\r\n}) => {\r\n  const classes = useStyles()\r\n\r\n  let disableForward = false\r\n  if (\r\n    new Date().toString().slice(4, 11) === currentDate.toString().slice(4, 11)\r\n  )\r\n    disableForward = true\r\n\r\n  const back = new Date(Date.parse(currentDate.toString()) - 24 * 3600 * 1000)\r\n  const forward = new Date(\r\n    Date.parse(currentDate.toString()) + 24 * 3600 * 1000\r\n  )\r\n\r\n  const handlerArrow = (newDate: Date) => {\r\n    handlerCommonChange(dispatch, newDate)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardHeader title={currentPhoto.title} subheader={currentPhoto.date} />\r\n        {currentPhoto.url && (\r\n          <CardMedia\r\n            image={currentPhoto.url}\r\n            title={\"photoOfTheDay\"}\r\n            className={classes.media}\r\n          >\r\n            {!catalogValue && (\r\n              <ArrowBackIosIcon\r\n                className={`photos-block__back`}\r\n                onClick={() => handlerArrow(back)}\r\n              />\r\n            )}\r\n            {!catalogValue && !disableForward && (\r\n              <ArrowForwardIosIcon\r\n                className={`photos-block__forward`}\r\n                onClick={() => handlerArrow(forward)}\r\n              />\r\n            )}\r\n          </CardMedia>\r\n        )}\r\n        <CardContent>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {currentPhoto.explanation}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CardPhoto\r\n","import React from \"react\"\r\nimport { Box, List } from \"@material-ui/core\"\r\nimport { connect } from \"react-redux\"\r\nimport { PhotoInterface } from \"../../../Redux/InterfacesEntity/Photo.interface\"\r\nimport CardPhoto from \"../../../Components/CartPhoto/CartPhoto\"\r\n\r\ntype PhotosBlockProps = {\r\n  currentDate: Date,\r\n  currentPhoto: PhotoInterface,\r\n  catalogValue: boolean,\r\n  catalog: [PhotoInterface],\r\n  dispatch: any,\r\n}\r\n\r\nconst PhotosBlock: React.FunctionComponent<PhotosBlockProps> = ({\r\n  currentDate,\r\n  currentPhoto,\r\n  catalogValue,\r\n  catalog,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <Box component={\"div\"} className={\"photos-block\"}>\r\n      {currentPhoto && !catalogValue && (\r\n        <>\r\n          <CardPhoto\r\n            currentDate={currentDate}\r\n            currentPhoto={currentPhoto}\r\n            catalogValue={catalogValue}\r\n            dispatch={dispatch}\r\n          />\r\n        </>\r\n      )}\r\n      {currentPhoto && catalogValue && (\r\n        <List className={\"list_request__container__list\"}>\r\n          {catalog &&\r\n            catalog.map((item: PhotoInterface, index: number) => (\r\n              <CardPhoto\r\n                currentDate={currentDate}\r\n                currentPhoto={item}\r\n                key={index}\r\n                catalogValue={catalogValue}\r\n              />\r\n            ))}\r\n        </List>\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  currentDate: state.data.data,\r\n  currentPhoto: state.currentPhoto.currentPhoto,\r\n  catalogValue: state.catalog.catalogValue,\r\n  catalog: state.currentPhoto.catalog,\r\n})\r\n\r\nexport default connect(mapStateToProps)(PhotosBlock)\r\n","import React from \"react\"\r\nimport MenuBlock from \"./MenuBlock/MenuBlock\"\r\nimport PhotosBlock from \"./PhotosBlock/PhotosBlock\"\r\nimport Box from \"@material-ui/core/Box\"\r\n\r\nconst MainPage: React.FunctionComponent = () => {\r\n  return (\r\n    <Box component={\"div\"} className={\"main-page\"}>\r\n      <MenuBlock />\r\n      <PhotosBlock />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MainPage\r\n","const axios = require(\"axios\")\r\n\r\nconst apiKey = \"VhPpn50ZBCAiZCbJPSV9uHl1q3XXZuAq8PVDmwMH\"\r\n\r\nexport default class ServicePhoto {\r\n  static getPhoto = async (currentDate: string) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.nasa.gov/planetary/apod?api_key=${apiKey}&date=${currentDate}`\r\n      )\r\n      return response.data\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  static getCatalog = async (currentDate: string) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.nasa.gov/planetary/apod?start_date=${currentDate}&api_key=${apiKey}`\r\n      )\r\n      return response.data\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n}\r\n","import { put, takeEvery } from \"redux-saga/effects\"\r\nimport {\r\n  ActionTypes,\r\n  getFailureAction,\r\n  setCurrentPhoto,\r\n  setCatalog,\r\n} from \"./Photo.actions\"\r\nimport ServicePhoto from \"../../../services/photo\"\r\n\r\nconst getDate = (objectDate: any) => {\r\n  const year = objectDate.getFullYear()\r\n  let mouth = objectDate.getMonth() + 1\r\n  if (mouth < 10) mouth = `0${mouth}`\r\n  let day = objectDate.getDate()\r\n  if (day < 10) day = `0${day}`\r\n  return `${year}-${mouth}-${day}`\r\n}\r\n\r\nfunction* getPhotoByDaySaga(actions: any) {\r\n  try {\r\n    const photo = yield ServicePhoto.getPhoto(getDate(actions.payload))\r\n    yield put(setCurrentPhoto(photo))\r\n  } catch (e) {\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nfunction* getCatalogSaga(actions: any) {\r\n  try {\r\n    const catalog = yield ServicePhoto.getCatalog(getDate(actions.payload))\r\n    yield put(setCatalog(catalog))\r\n  } catch (e) {\r\n    yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nexport default function* photoSaga() {\r\n  yield takeEvery(ActionTypes.GET_PHOTO_BY_DAY, getPhotoByDaySaga)\r\n  yield takeEvery(ActionTypes.GET_CATALOG_BY_DAY, getCatalogSaga)\r\n}\r\n","import React from \"react\"\nimport \"./App.scss\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport createSagaMiddleware from \"redux-saga\"\nimport rootReducer from \"./Redux/index\"\nimport MainPage from \"./Pages/MainPage/MainPage\"\nimport Box from \"@material-ui/core/Box\"\nimport ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\"\nimport photoSaga from \"./Redux/store/Photo/Photo.sagas\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(photoSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <ScopedCssBaseline>\n      <Box component=\"div\" className={\"wrapper\"}>\n        <Box component=\"div\" className={\"main\"}>\n          <MainPage />\n        </Box>\n      </Box>\n    </ScopedCssBaseline>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// )\n\nconst rootEl = document.getElementById(\"root\")\nReactDOM.render(<App />, rootEl)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}