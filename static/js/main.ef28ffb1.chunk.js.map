{"version":3,"sources":["Redux/store/CardItem/CardItem.reduser.ts","Redux/store/DescriptionItem/DescriptionItem.reduser.ts","Redux/index.ts","Redux/store/CardItem/CardItem.actions.ts","Redux/store/CardItem/CardItem.sagas.ts","Redux/store/DescriptionItem/DescriptionItem.actions.ts","Redux/store/DescriptionItem/DescriptionItem.sagas.ts","Components/ListItems/ListItems.tsx","Components/DescriptionItem/DescriptionItem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","cardItem","descriptionItem","combineReducers","state","action","type","ActionTypes","setListAlbumsWithPhotosInStore","cardItemSaga","actions","takeEvery","descriptionItemSaga","ListItems","className","DescriptionItem","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAQMA,EAAsB,CAC1BC,SAAU,CAAC,KCDPD,EAAsB,CAC1BE,gBAAiB,CAAC,KCLLC,4BAAgB,CAC7BF,SFO6B,WAGzB,IAFJG,EAEG,uDAFYJ,EACfK,EACG,uCAQD,OAPMA,EAAOC,KAONF,GEjBTF,gBDMoC,WAGhC,IAFJE,EAEG,uDAFYJ,EACfK,EACG,uCAQD,OAPMA,EAAOC,KAONF,K,wBEpBEG,EACkB,gD,WCDrBC,G,WAWeC,GAXzB,SAAUD,EAA+BE,GAAzC,wGAWe,SAAUD,IAAV,iEACb,OADa,SACPE,YACJJ,EACAC,GAHW,uCCVR,IAAMD,EACkB,gD,WCFrBC,G,WAWeI,GAXzB,SAAUJ,EAA+BE,GAAzC,wGAWe,SAAUE,IAAV,iEACb,OADa,SACPD,YACJJ,EACAC,GAHW,uCCRf,IAQeK,EAR4B,WACzC,OAAO,yBAAKC,UAAW,QAAhB,MCOMC,EARkC,WAC/C,OAAO,mCCKHC,EAAiBC,cAEjBC,EAAQC,sBACZC,EACAC,8BAAoB,CAAEC,OAAO,EAAMC,WAAY,IAA/CF,CACEG,0BAAgBR,KAIpBA,EAAeS,IAAIhB,GACnBO,EAAeS,IAAIb,GAEnB,IASec,EATO,kBACpB,kBAAC,IAAD,CAAUR,MAAOA,GACf,yBAAKJ,UAAW,WACd,kBAAC,EAAD,MACA,kBAAC,EAAD,SChBca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef28ffb1.chunk.js","sourcesContent":["import { CardItem } from \"../../InterfacesEntity/CardItem.interface\"\r\nimport { ActionTypes } from \"./CardItem.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n\tcardItem: CardItem\r\n}\r\n\r\nconst initialState: State = {\r\n  cardItem: [{} as CardItem],\r\n}\r\n\r\nexport const cardItemReducer = (\r\n  state: State = initialState,\r\n  action: Action<[{}]>\r\n) => {\r\n  switch (action.type) {\r\n  // case ActionTypes.SET_LIST_ALBUMS_WITH_PHOTOS:\r\n  //   return {\r\n  //     ...state,\r\n  //     albumsForUserOwnerPage: action.payload\r\n  //   }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { DescriptionItem } from \"../../InterfacesEntity/DescriptionItem.interface\"\r\nimport { ActionTypes } from \"./DescriptionItem.actions\"\r\nimport { Action } from \"../../interfacesAction/action.interface\"\r\n\r\nexport interface State {\r\n\tdescriptionItem: DescriptionItem\r\n}\r\n\r\nconst initialState: State = {\r\n  descriptionItem: [{} as DescriptionItem],\r\n}\r\n\r\nexport const descriptionItemReducer = (\r\n  state: State = initialState,\r\n  action: Action<[{}]>\r\n) => {\r\n  switch (action.type) {\r\n  // case ActionTypes.SET_LIST_ALBUMS_WITH_PHOTOS:\r\n  //   return {\r\n  //     ...state,\r\n  //     albumsForUserOwnerPage: action.payload\r\n  //   }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { cardItemReducer } from \"./store/CardItem/CardItem.reduser\"\r\nimport { descriptionItemReducer } from \"./store/DescriptionItem/DescriptionItem.reduser\"\r\n\r\nexport default combineReducers({\r\n  cardItem: cardItemReducer,\r\n  descriptionItem: descriptionItemReducer,\r\n})\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\nimport { CardItem } from \"../../InterfacesEntity/CardItem.interface\"\r\n\r\nexport const ActionTypes = {\r\n  GET_LIST_ALBUMS_WITH_PHOTOS: \"[Album] Get list albums with photos by userId\",\r\n\r\n  GET_FAILURE: \"[getFailure] Get failure\",\r\n}\r\n\r\nexport const getListAlbumsWithPhotosByUserIDAction = (\r\n  userId: string\r\n): Action<string> => ({\r\n  type: ActionTypes.GET_LIST_ALBUMS_WITH_PHOTOS,\r\n  payload: userId,\r\n})\r\n\r\nexport const getFailureAction = (error?: any): Action<any> => ({\r\n  type: ActionTypes.GET_FAILURE,\r\n  payload: error,\r\n})\r\n","import { put, takeEvery } from \"redux-saga/effects\"\r\nimport { ActionTypes } from \"./CardItem.actions\"\r\n\r\nfunction* setListAlbumsWithPhotosInStore(actions: any) {\r\n  try {\r\n    // const listAlbums = yield Service.getListAlbumsWithPhotosByUserID(\r\n    //   actions.payload\r\n    // )\r\n    // yield put(setListAlbumsWithPhotosInStoreAction(listAlbums))\r\n  } catch (e) {\r\n    // yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nexport default function* cardItemSaga() {\r\n  yield takeEvery(\r\n    ActionTypes.GET_LIST_ALBUMS_WITH_PHOTOS,\r\n    setListAlbumsWithPhotosInStore\r\n  )\r\n}\r\n","import { Action } from \"../../interfacesAction/action.interface\"\r\nimport { DescriptionItem } from \"../../InterfacesEntity/DescriptionItem.interface\"\r\n\r\n\r\nexport const ActionTypes = {\r\n  GET_LIST_ALBUMS_WITH_PHOTOS: \"[Album] Get list albums with photos by userId\",\r\n\r\n  GET_FAILURE: \"[getFailure] Get failure\",\r\n}\r\n\r\nexport const getListAlbumsWithPhotosByUserIDAction = (\r\n  userId: string\r\n): Action<string> => ({\r\n  type: ActionTypes.GET_LIST_ALBUMS_WITH_PHOTOS,\r\n  payload: userId,\r\n})\r\n\r\n\r\nexport const getFailureAction = (error?: any): Action<any> => ({\r\n  type: ActionTypes.GET_FAILURE,\r\n  payload: error,\r\n})\r\n","import { put, takeEvery } from \"redux-saga/effects\"\r\nimport { ActionTypes } from \"./DescriptionItem.actions\"\r\n\r\nfunction* setListAlbumsWithPhotosInStore(actions: any) {\r\n  try {\r\n    // const listAlbums = yield Service.getListAlbumsWithPhotosByUserID(\r\n    //   actions.payload\r\n    // )\r\n    // yield put(setListAlbumsWithPhotosInStoreAction(listAlbums))\r\n  } catch (e) {\r\n    // yield put(getFailureAction(e))\r\n  }\r\n}\r\n\r\nexport default function* descriptionItemSaga() {\r\n  yield takeEvery(\r\n    ActionTypes.GET_LIST_ALBUMS_WITH_PHOTOS,\r\n    setListAlbumsWithPhotosInStore\r\n  )\r\n}\r\n","import React, { useState } from \"react\"\r\n\r\n// type SearchProps = {\r\n//   dispatch: any,\r\n// }\r\n\r\nconst ListItems: React.FunctionComponent = () => {\r\n  return <div className={\"menu\"}>1</div>\r\n}\r\n\r\n// const mapStateToProps = (state: any) => ({\r\n//   searchStringState: state.pagination.searchString,\r\n// })\r\n\r\nexport default ListItems\r\n","import React, { useState } from \"react\"\r\n\r\n// type SearchProps = {\r\n//   dispatch: any,\r\n// }\r\n\r\nconst DescriptionItem: React.FunctionComponent = () => {\r\n  return <div>2</div>\r\n}\r\n\r\n// const mapStateToProps = (state: any) => ({\r\n//   searchStringState: state.pagination.searchString,\r\n// })\r\n\r\nexport default DescriptionItem\r\n","import React from \"react\"\nimport \"./App.scss\"\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport createSagaMiddleware from \"redux-saga\"\nimport rootReducer from \"./Redux/index\"\nimport cardItemSaga from \"./Redux/store/CardItem/CardItem.sagas\"\nimport descriptionItemSaga from \"./Redux/store/DescriptionItem/DescriptionItem.sagas\"\nimport ListItems from \"./Components/ListItems/ListItems\"\nimport DescriptionItem from \"./Components/DescriptionItem/DescriptionItem\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(cardItemSaga)\nsagaMiddleware.run(descriptionItemSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <div className={\"wrapper\"}>\n      <ListItems />\n      <DescriptionItem />\n    </div>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}